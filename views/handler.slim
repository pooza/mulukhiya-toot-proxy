doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {entries: [{label: 'モロヘイヤHOME', href: '/mulukhiya'}, {label: 'ハンドラ'}]}
    main#app class=env.type
      == slim.render 'fragment/message'
      h2 ハンドラ
      .field-update-button-container v-if='restartable'
        button @click='restartPuma' 再起動
        p.alert 再起動している間（数十秒程度）は操作できなくなります。
      - Mulukhiya::Event.all do |event|
        section.config v-if='account.is_admin'
          h3 @click='toggleVisibility("#{event.name}")' = "#{event.name} イベント"
          slide-up-down :active='layout.details.#{event.name}'
            .clearfix class='indented'
              - event.all_handlers.sort_by(&:underscore).each do |handler|
                .handler-container :class="{disabled: handlers.#{handler.underscore}}"
                  h4
                    - if handler.experimental?
                      i class='fa fa-flask' v-tooltip.right="'実験的機能'"
                    = handler.underscore
                  label
                    - if handler.toggleable?
                      input type='checkbox' v-model='handlers.#{handler.underscore}' @change='onChangeHandler' value=handler.underscore
                    - else
                      input type='checkbox' v-model='handlers.#{handler.underscore}' disabled='1'
                    | 無効化
                  .description
                    a href='https://github.com/pooza/mulukhiya-toot-proxy/wiki/#{handler.name}' target='_blank' rel='noreferrer'
                      | このハンドラの説明
    == slim.render 'fragment/footer'
    javascript:
      'use strict'
      const app = Vue.createApp({
        data () {
          return {
            account: {is_admin: false, username: null},
            handlers: {},
            restartable: false,
            layout: {
              details: {
                alert: false,
                announce: false,
                follow: false,
                mention: false,
                post_bookmark: false,
                post_boost: false,
                post_fav: false,
                post_thumbnail: false,
                post_toot: false,
                post_upload: false,
                post_webhook: false,
                pre_thumbnail: false,
                pre_toot: true,
                pre_upload: true,
                pre_webhook: false,
              },
            },
          }
        },
        mounted () {
          this.methods.getConfig()
            .then(e => {this.account = this.methods.createAccountInfo(e)})
            .catch(e => Swal.fire({text: e.message, icon: 'error'}))
          this.methods.getHandlers()
            .then(e => e.map(v => this.handlers[v.name] = v.disable))
            .catch(e => Swal.fire({text: e.message, icon: 'error'}))
        },
        methods: {
          toggleVisibility (name) {
            this.layout.details[name] = !this.layout.details[name]
          },
          restartPuma () {
            this.$dialog.confirm({body: 'Pumaを再起動します。'}, {okText: '再起動'})
              .then(e => this.methods.restartPuma())
              .then(e => {this.restartable = false})
              .catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          onChangeHandler (e) {
            this.methods.toggleHandler(e.target.value, e.target.checked)
              .then(e => {this.restartable = true})
              .catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
        },
      })
      app.use(window.MulukhiyaLib)
      app.component('slide-up-down', window.SlideUpDown)
      app.directive('tooltip', window.VTooltip);
      app.mount('#app')
