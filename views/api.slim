doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {current: 'API'}
    main#app class=env.type
      == slim.render 'fragment/message'
      h2 API
      ul.links
        - if controller.announcement?
          li v-if='account.is_admin'
            h3 @click='toggleVisibility("announcement")' お知らせ
            vue-slide-up-down :active='layout.details.announcement'
              .endpoint-container
                .role admin
                .role moderator
                .link POST /mulukhiya/api/announcement/update
                pre.payload
                  | {{query_params.announcement_update}}
                - if config.keys('/sidekiq/schedule/announcement').member?('every')
                  .link-description
                    | スケジュール
                    code #{config['/sidekiq/schedule/announcement/every']}
                .link-description お知らせの更新を行います。
                .field-update-button-container
                  button @click='updateAnnouncement' 実行
        li
          h3 @click='toggleVisibility("media")' メディア
          vue-slide-up-down :active='layout.details.media'
            .endpoint-container
              .link GET {{endpoints.media_list}}
              input type='number' placeholder='ページ' v-model.trim='query_params.media_list.page' @input='onInputMediaListPage' @keydown.enter='onEnterMediaList'
              .link-description 最近投稿されたメディアファイルを表示します。
              .field-update-button-container
                button @click='getMedias' 実行
                pre.result v-if='result.media_list' = '{{result.media_list}}'
            .endpoint-container v-if='account.is_admin'
              .role admin
              .role moderator
              .link POST /mulukhiya/api/media/file/clear
              pre.payload
                | {{query_params.media_file_clear}}
              - if config.keys('/sidekiq/schedule/media_cleaning').member?('cron')
                .link-description
                  | スケジュール
                  code #{config['/sidekiq/schedule/media_cleaning/cron']}
              .link-description メディアファイル変換結果をクリアします。
              .field-update-button-container
                button @click='clearMediaFiles' 実行
            .endpoint-container v-if='account.is_admin'
              .role admin
              .role moderator
              .link POST /mulukhiya/api/media/metadata/clear
              pre.payload
                | {{query_params.media_metadata_clear}}
              .link-description メディアファイルのメタデータをクリアします。
              .field-update-button-container
                button @click='clearMediaMetadata' 実行
        - if controller.livecure?
          li
            h3 @click='toggleVisibility("program")' 実況番組表
            vue-slide-up-down :active='layout.details.program'
              .endpoint-container
                .link GET /mulukhiya/api/program
                .link-description
                  | キャッシュ済みの
                  a href='#{config['/programs/url']}' target='_blank' 実況番組表
                  | を表示します。
                .field-update-button-container
                  button @click='getPrograms' 実行
                  pre.result v-if='result.program_list' = '{{result.program_list}}'
              .endpoint-container v-if='account.is_admin'
                .role admin
                .role moderator
                .link POST /mulukhiya/api/program/update
                pre.payload
                  | {{query_params.program_update}}
                - if config.keys('/sidekiq/schedule/program_update').member?('every')
                  .link-description
                    | スケジュール
                    code #{config['/sidekiq/schedule/program_update/every']}
                .link-description
                  a href='#{config['/programs/url']}' target='_blank' 実況番組表
                  | を取得し、キャッシュします。
                .field-update-button-container
                  button @click='updatePrograms' 実行
        - if controller.favorite_tags?
          li
            h3 @click='toggleVisibility("favorite_tags")' プロフィールに含まれるタグ
            vue-slide-up-down :active='layout.details.favorite_tags'
              .endpoint-container
                .link GET /mulukhiya/api/tagging/favorites
                .link-description プロフィールでよく使われているハッシュタグの一覧を返します。
                .field-update-button-container
                  button @click='getFavoriteTags' 実行
                  pre.result v-if='result.favorite_tags' = '{{result.favorite_tags}}'
        li
          h3 @click='toggleVisibility("tagging_dic")' ハッシュタグ辞書
          vue-slide-up-down :active='layout.details.tagging_dic'
            .endpoint-container
              .link POST /mulukhiya/api/tagging/tag/search
              pre.payload
                | {{query_params.tagging_tag_search}}
              input type='search' placeholder='検索フレーズ' v-model.trim='query_params.tagging_tag_search.q' @keydown.enter='onEnterTags'
              .link-description ハッシュタグ辞書から、該当するパターンを検索します。
              .field-update-button-container
                button :disabled='!query_params.tagging_tag_search.q' @click='searchTags' 実行
                pre.result v-if='result.search_tag' = '{{result.search_tag}}'
            .endpoint-container v-if='account.is_admin'
              .role admin
              .role moderator
              .link POST /mulukhiya/api/tagging/dic/update
              pre.payload
                | {{query_params.tagging_dic_update}}
              - if config.keys('/sidekiq/schedule/tagging_dictionary_update').member?('every')
                .link-description
                  | スケジュール
                  code #{config['/sidekiq/schedule/tagging_dictionary_update/every']}
              .link-description 以下のハッシュタグ辞書を取得し、キャッシュを更新します。
              - config['/tagging/dictionaries'].each do |dic|
                .link
                  a href=dic['url'] target='_blank' = dic['url'].ellipsize(64)
              .field-update-button-container
                button @click='updateTaggingDictionary' 実行
        li v-if='account.is_admin'
          h3 @click='toggleVisibility("tagging_usertag")' 固定タグ
          vue-slide-up-down :active='layout.details.tagging_usertag'
            .endpoint-container
              .role admin
              .role moderator
              .link POST /mulukhiya/api/tagging/usertag/clear
              pre.payload
                | {{query_params.tagging_usertag_clear}}
              - if config.keys('/sidekiq/schedule/user_tag_initialize').member?('cron')
                .link-description
                  | スケジュール
                  code #{config['/sidekiq/schedule/user_tag_initialize/cron']}
              .link-description インスタンス内全ユーザーの固定タグ設定をクリアします。
              .field-update-button-container
                button @click='clearUserTags' 実行
        - if controller.feed?
          li v-if='account.username'
            h3 @click='toggleVisibility("feed")' フィード
            vue-slide-up-down :active='layout.details.feed'
              .endpoint-container
                .link GET /mulukhiya/api/feed/list
                .link-description フィードの一覧を返します。
                .field-update-button-container
                  button @click='getFeeds' 実行
                  pre.result v-if='result.feed_list' = '{{result.feed_list}}'
              .endpoint-container v-if='account.is_admin'
                .role admin
                .role moderator
                .link POST /mulukhiya/api/feed/update
                pre.payload
                  | {{query_params.feed_update}}
                - if config.keys('/sidekiq/schedule/feed_update').member?('every')
                  .link-description
                    | スケジュール
                    code #{config['/sidekiq/schedule/feed_update/every']}
                .link-description カスタムフィードの更新を行います。
                .field-update-button-container
                  button @click='updateCustomFeeds' 実行
        li v-if='account.username && config.annict'
          h3 @click='toggleVisibility("annict")' Annict
          vue-slide-up-down :active='layout.details.annict'
            .endpoint-container
              .link POST /mulukhiya/api/annict/crawl
              pre.payload
                | {{query_params.annict_crawl}}
              .link-description Annictへの問い合わせを行います。
              .field-update-button-container
                button @click='crawlAnnict' 実行
        li
          h3 @click='toggleVisibility("health")' 動作状況
          vue-slide-up-down :active='layout.details.health'
            .endpoint-container
              .link GET /mulukhiya/api/health
              .link-description モロヘイヤの動作状況を表示します。
              .field-update-button-container
                button @click='getHealth' 実行
                pre.result v-if='result.health' = '{{result.health}}'
        - if Mulukhiya::CustomAPI.entries.present?
          li
            h3 @click='toggleVisibility("custom")' #{sns.node_name}の独自機能
            vue-slide-up-down :active='layout.details.custom'
              - Mulukhiya::CustomAPI.entries.each do |entry|
                .endpoint-container
                  .link GET #{File.join('/mulukhiya/api', entry['path'])}
                  .link-description = entry['description']
                  .field-update-button-container
                    button @click='execCustomAPI("#{entry['id']}", "#{entry['path']}")' 実行
                    pre.result v-if='result.#{entry['id']}' = '{{result.' + entry['id'] + '}}'
        li
          h3 @click='toggleVisibility("about")' パッケージ情報
          vue-slide-up-down :active='layout.details.about'
            .endpoint-container
              .link GET /mulukhiya/api/about
              .link-description モロヘイヤのバージョン等、パッケージ情報を表示します。
              .field-update-button-container
                button @click='getAbout' 実行
                pre.result v-if='result.about' = '{{result.about}}'
    == slim.render 'fragment/footer'
    javascript:
      'use strict'
      Vue.use(MulukhiyaLib)
      Vue.use(window.VuejsDialog.main.default, {okText: '了解', cancelText: 'キャンセル'})
      Vue.component('vue-slide-up-down', VueSlideUpDown)
      new Vue({
        el: '#app',
        data: {
          account: {is_admin: false, username: null},
          config: {annict: null},
          feed: {list: {href: null}},
          endpoints: {
            media_list: '/mulukhiya/api/media?page=1'
          },
          query_params: {
            media_list: {page: 1},
            announcement_update: {token: Vue.getToken()},
            media_file_clear: {token: Vue.getToken()},
            media_metadata_clear: {token: Vue.getToken()},
            program_update: {token: Vue.getToken()},
            tagging_tag_search: {q: null},
            tagging_dic_update: {token: Vue.getToken()},
            tagging_usertag_clear: {token: Vue.getToken()},
            annict_crawl: {token: Vue.getToken()},
            feed_update: {token: Vue.getToken()},
          },
          result: {
            search_tag: null,
            favorite_tags: null,
            media_list: null,
            program_list: null,
            feed_list: null,
            health: null,
            about: null,
          },
          layout: {
            details: {
              announcement: false,
              media: false,
              program: false,
              favorite_tags: false,
              tagging_dic: false,
              tagging_usertag: false,
              feed: false,
              health: false,
              sidekiq: false,
              annict: false,
              custom: false,
              about: false,
            },
          },
        },
        mounted: function () {
          Vue.getConfig()
            .then(e => {
              this.account = e.account
              this.config = e.config
              this.feed.list.href = Vue.createURL('/mulukhiya/api/feed/list')
            }).catch(e => Vue.alert(this.$dialog, e))
        },
        methods: {
          onEnterTags: function () {
            this.searchTags()
          },
          onEnterMediaList: function () {
            this.getMedias()
          },
          onInputMediaListPage: function () {
            const url = new URL('/mulukhiya/api/media', location.href)
            url.searchParams.set('page', this.query_params.media_list.page)
            this.endpoints.media_list = `${url.pathname}${url.search}`
          },
          toggleVisibility: function (name) {
            this.layout.details[name] = !this.layout.details[name]
          },
          updateAnnouncement: function () {
            Vue.updateAnnouncement()
              .then(e => {this.layout.details['announcement'] = false})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          getMedias: function () {
            this.result.media_list = null
            Vue.getMedias(this.query_params.media_list.page)
              .then(e => {this.result.media_list = e})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          clearMediaFiles: function () {
            Vue.clearMediaFiles()
              .then(e => {this.layout.details['media'] = false})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          clearMediaMetadata: function () {
            Vue.clearMediaMetadata()
              .then(e => {this.layout.details['media'] = false})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          updatePrograms: function () {
            Vue.updatePrograms()
              .then(e => {this.layout.details['program'] = false})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          getPrograms: function () {
            this.result.program_list = null
            Vue.getPrograms()
              .then(e => {this.result.program_list = e})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          getFavoriteTags: function () {
            this.result.favorite_tags = null
            Vue.getFavoriteTags()
              .then(e => {this.result.favorite_tags = e})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          updateTaggingDictionary: function () {
            Vue.updateTaggingDictionary()
              .then(e => {this.layout.details['tagging_dic'] = false})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          clearUserTags: function () {
            Vue.clearUserTags()
              .then(e => {this.layout.details['tagging_usertag'] = false})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          getFeeds: function () {
            this.result.feed_list = null
            Vue.getFeeds()
              .then(e => {this.result.feed_list = e})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          updateCustomFeeds: function () {
            Vue.updateCustomFeeds()
              .then(e => {this.layout.details['feed'] = false})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          crawlAnnict: function () {
            this.$dialog.confirm({body: 'Annictへの問い合わせを実行します。'}, {okText: '実行'})
              .then(e => Vue.crawlAnnict())
              .then(e => {this.layout.details['annict'] = false})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          searchTags: function () {
            this.result.search_tag = null
            Vue.searchTags(this.query_params.tagging_tag_search.q)
              .then(e => {this.result.search_tag = e})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          getHealth: function () {
            this.result.health = null
            Vue.getHealth()
              .then(e => {this.result.health = e})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          execCustomAPI: function (id, path) {
            this.result.health = null
            Vue.execCustomAPI(path)
              .then(e => Vue.set(this.result, id, e))
              .catch(e => Vue.alert(this.$dialog, e))
          },
          getAbout: function () {
            this.result.about = null
            Vue.getAbout()
              .then(e => {this.result.about = e})
              .catch(e => Vue.alert(this.$dialog, e))
          },
        },
      })
