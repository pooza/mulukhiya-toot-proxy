doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {current: 'トークンの管理'}
    main#app class=env.type
      == slim.render 'fragment/message'
      h2 トークンの管理
      nav.tokens v-if='accounts.length'
        h3 登録済みのトークン
        .token :class='{loggedin:isLoggedIn(current_account)}' v-for='current_account in accounts'
          h4
            a href='#' @click='switchAccount(current_account)' v-if='current_account.username' v-tooltip.right="'このアカウントでログイン'" = '@{{current_account.username}}'
            span.alert v-else='' 壊れたトークン
            span.role v-if='current_account.is_moderator' moderator
            span.role v-if='current_account.is_admin' admin
            span.role v-if='current_account.is_test_bot' test bot
            span.role v-if='current_account.is_info_bot' info bot
            span.role v-if='isLoggedIn(current_account)' logged in
            i class='fas fa-trash' @click='deleteAccount(current_account)' v-tooltip.left="'トークンの削除'" v-else=''
          .field
            .title 権限:
            .value = '{{current_account.scopes}}'
          .field
            .title 暗号化トークン:
            .value
              code = '{{current_account.token}}'
          .field
            .title webhook:
            .value
              code = '{{current_account.webhook}}'
        .all-tokens v-if='all_tokens'
          h4 全ての暗号化トークン
          .description 他のブラウザやPCに、暗号化トークンを持ち出すことができます。
          textarea ref='all_tokens' :value='all_tokens'
          i class='fas fa-clipboard' v-tooltip.left="'クリップボードにコピー'" @click='copyAllTokens'
      nav.tokens
        h3 トークンの登録
        .token
          h4 新しいトークンを登録
          - if controller.oauth_callback?
            .description
              a href=params[:oauth_url] #{controller.display_name}の認証ページ
              | で認証を行って、新しいトークンを登録します。
          - else
            .description #{controller.display_name}で認証を行って、新しいトークンを登録します。
            .description
              a href=params[:oauth_url] target='_blank' 認証コードを取得
              | して下の欄に入力、認証ボタンを押下してください。
            .auth-form
              input.code type='text' v-model.trim='input.authcode' placeholder='#{controller.display_name}の認証コード'
              - if env.mastodon_type?
                button :disabled='!input.authcode' @click='authMastodon' 認証
              - elsif env.misskey_type?
                button :disabled='!input.authcode' @click='authMisskey' 認証
        .token
          h4 既存のトークンを登録
          .description 他のPCに登録されている暗号化トークンを入力して、登録ボタンを押下してください。
          - if controller.oauth_webui_uri
            .description v-if='account.is_admin'
              a href=controller.oauth_webui_uri target='_blank' #{controller.oauth_webui_uri}
              | で作成したトークンを、bin/crypt.rbで暗号化して登録することもできます。
              | 以下の権限を含むものにしてください。
            .field v-if='account.is_admin'
              .title 権限:
              .value #{controller.oauth_scopes.join(', ')}
          textarea placeholder='暗号化トークンを1件ずつ、改行で区切って' v-model.trim='input.token'
          button :disabled='!input.token' @click='registerTokens' 登録
    == slim.render 'fragment/footer'
    javascript:
      'use strict'
      Vue.use(VTooltip)
      Vue.use(MulukhiyaLib)
      Vue.use(window.VuejsDialog.main.default, {okText: '了解', cancelText: 'キャンセル'})
      new Vue({
        el: '#app',
        data: {
          account: {is_admin: false, username: null},
          accounts: [],
          tokens: [],
          all_tokens: null,
          token: Vue.getToken(),
          input: {
            authcode: null,
            token: null,
          },
        },
        mounted: function () {
          Vue.getConfig()
            .then(e => {this.account = e.account})
            .then(e => Vue.getAccounts())
            .then(e => {
              this.accounts = e
              this.all_tokens = this.getAllTokens()
            }).catch(e => Vue.alert(this.$dialog, e))
        },
        methods: {
          switchAccount: function (account) {
            Vue.switchAccount(account)
              .then(e => {
                this.account = account
                this.token = account.token
              }).catch(e => Vue.alert(this.$dialog, e))
          },
          registerTokens: function () {
            Promise.all(
              this.input.token.trim().split("\n").map(token => Vue.registerToken(token))
            ).then(e => {this.account = e[0]})
            .then(e => Vue.getAccounts())
            .then(e => {
              this.accounts = e
              this.all_tokens = this.getAllTokens()
              this.input.token = null
            }).catch(e => Vue.alert(this.$dialog, e))
          },
          deleteAccount: function (account) {
            this.$dialog.confirm({body: `@${account.username}のトークンを一覧から削除します。（サーバからは削除されません）`}, {okText: '削除'})
              .then(e => Vue.deleteToken(account.token))
              .then(e => {
                this.tokens = e
                return Vue.getAccounts()
              }).then(e => {
                this.accounts = e
                this.all_tokens = this.getAllTokens()
              }).catch(e => Vue.alert(this.$dialog, e))
          },
          authMastodon: function () {
            Vue.authMastodon(this.input.authcode)
              .then(e => {
                this.input.authcode = null
                this.token = e.access_token_crypt
                return Vue.registerToken(this.token)
              }).then(e => {
                Vue.setToken(this.token)
                this.account = e
                return Vue.getAccounts()
              }).then(e => {
                this.accounts = e
                this.all_tokens = this.getAllTokens()
              }).catch(e => Vue.alert(this.$dialog, e))
          },
          authMisskey: function () {
            Vue.authMisskey(this.input.authcode)
              .then(e => {
                this.input.authcode = null
                this.token = e.access_token_crypt
                return Vue.registerToken(this.token)
              }).then(e => {
                Vue.setToken(this.token)
                this.account = e
                return Vue.getAccounts()
              }).then(e => {
                this.accounts = e
                this.all_tokens = this.getAllTokens()
              }).catch(e => Vue.alert(this.$dialog, e))
          },
          getAllTokens: function () {
            return this.accounts.map(v => v.token).join("\n")
          },
          copyAllTokens: function () {
            this.$refs.all_tokens.select()
            document.execCommand('copy')
          },
          isLoggedIn: function (account) {
            return account.token == this.token
          }
        },
      })
