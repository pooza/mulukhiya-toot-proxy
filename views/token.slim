doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {entries: [{label: 'モロヘイヤHOME', href: '/mulukhiya'}, {label: 'トークンの管理'}]}
    main#app class=env.type
      == slim.render 'fragment/message'
      h2 トークンの管理
      .field-update-button-container v-if='restartable'
        button @click='restartPuma' 再起動
        p.alert 再起動している間（数十秒程度）は操作できなくなります。
      nav.tokens v-if='accounts.length'
        h3 登録済みのトークン
        .token :class='{loggedin:isLoggedIn(current_account)}' v-for='current_account in accounts'
          h4
            a href='javascript:void(0)' @click='switchAccount(current_account)' v-if='current_account.username' v-tooltip.right="'このアカウントでログイン'" @{{current_account.username}}
            span.alert v-else='' 壊れたトークン
            template v-for='role in current_account.roles'
              .role v-if='role.is_visible' = '{{role.name}}'
            .role v-if='current_account.is_test_bot' test bot
            .role v-if='current_account.is_info_bot' info bot
            .role v-if='isLoggedIn(current_account)' logged in
            i class='fas fa-trash' @click='deleteAccount(current_account)' v-tooltip.left="'トークンの削除'" v-else=''
          .field
            .title 権限
            .value
              .scope v-for='scope in current_account.scopes' {{scope}}
              span.alert v-if='!current_account.is_scopes_valid' 古いトークンかも知れません。作り直しをお勧めします。
          .field
            .title トークン
            .value
              i class='fas fa-clipboard' v-tooltip.right="'クリップボードにコピー'" :data-clipboard-target="'#token-' + current_account.username"
              code :id='"token-" + current_account.username' v-if='current_account.token' {{current_account.token}}
          .field
            .title webhook
            .value
              i class='fas fa-clipboard' v-tooltip.right="'クリップボードにコピー'" :data-clipboard-target="'#webhook-' + current_account.username"
              code :id='"webhook-" + current_account.username' v-if='current_account.webhook' {{current_account.webhook}}
      nav.tokens
        h3 トークンの登録
        .token
          h4 新しいトークンを登録
          .description #{controller.display_name}で認証を行って、新しいトークンを登録します。
          .description
            a href=params[:oauth_url] target='_blank' rel='noreferrer' 認証コードを取得
            | して下の欄に入力、認証ボタンを押下してください。
          - if env.misskey_type?
            .description
              | 認証後の、URL末尾のUUID（
              code xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
              | 形式の文字列）が
              strong 認証コード
              | です。
          .auth-form
            input type='password' v-model.trim='input.authcode' placeholder='#{controller.display_name}の認証コード'
            - if env.mastodon_type?
              button :disabled='!input.authcode' @click='authMastodon(input.authcode)' 認証
            - elsif env.misskey_type?
              button :disabled='!input.authcode' @click='authMisskey(input.authcode)' 認証
        .token v-if='account.is_info_bot'
          h4 お知らせボット用のトークンを登録
          .description #{controller.display_name}で認証を行って、お知らせボット用の新しいトークンを登録します。
          .description
            a href=params[:infobot_oauth_url] target='_blank' rel='noreferrer' 認証コードを取得
            | して下の欄に入力、認証ボタンを押下してください。
          - if env.misskey_type?
            .description
              | 認証後の、URL末尾のUUID（
              code xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
              | 形式の文字列）が
              strong 認証コード
              | です。
          .auth-form
            input type='password' v-model.trim='input.infobot_authcode' placeholder='#{controller.display_name}の認証コード'
            - if env.mastodon_type?
              button :disabled='!input.infobot_authcode' @click='authMastodon(input.infobot_authcode, "infobot")' 認証
            - elsif env.misskey_type?
              button :disabled='!input.infobot_authcode' @click='authMisskey(input.infobot_authcode, "infobot")' 認証
        .token v-if='account.username'
          h4 トークンをまとめて登録
          .description トークンを改行区切りで入力して、登録ボタンを押下してください。
          - if controller.oauth_webui_uri
            .description v-if='account.is_admin'
              a href=controller.oauth_webui_uri target='_blank' rel='noreferrer' #{controller.oauth_webui_uri}
              | で作成したトークンを、bin/crypt.rbで暗号化して登録することもできます。
              | 以下の権限を含むものにしてください。
            .field v-if='account.is_admin'
              .title 権限
              .value
                - controller.oauth_scopes.each do |scope|
                  .scope = scope
          textarea placeholder='トークンを1件ずつ、改行で区切って' v-model.trim='input.token'
          button :disabled='!input.token' @click='registerTokens' 登録
    == slim.render 'fragment/footer'
    javascript:
      'use strict'
      const app = Vue.createApp({
        data () {
          return {
            account: {},
            accounts: [],
            tokens: [],
            all_tokens: null,
            token: null,
            restartable: false,
            input: {
              authcode: null,
              infobot_authcode: null,
              token: null,
            },
          }
        },
        async created () {
          this.token = this.methods.getToken()
          this.methods.getConfig()
            .then(e => {this.account = this.methods.createAccountInfo(e)})
            .then(e => this.methods.getAccounts())
            .then(e => {
              this.accounts = e
              this.all_tokens = this.getAllTokens()
            })
        },
        async mounted () {
          new ClipboardJS('.token i')
        },
        methods: {
          switchAccount (account) {
            this.methods.switchAccount(account)
              .then(e => {
                this.account = account
                this.token = account.token
              }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          registerTokens () {
            Promise.all(this.input.token.trim().split("\n").map(token => this.methods.registerToken(token)))
              .then(e => {this.account = e[0]})
              .then(e => this.methods.getAccounts())
              .then(e => {
                this.accounts = e
                this.all_tokens = this.getAllTokens()
                this.input.token = null
              }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          deleteAccount (account) {
            Swal.fire({
              title: '登録済みトークンの削除',
              text: `@${account.username}のトークンを一覧から削除します。（サーバーからは削除されません）`,
              icon: 'warning',
              showCancelButton: true,
              confirmButtonText: '削除',
              cancelButtonText: 'キャンセル',
            }).then((result) => {
              if (!result.isConfirmed) return
              this.methods.deleteToken(account.token)
                .then(e => this.methods.getAccounts())
                .then(e => this.accounts = e)
                .then(_ => this.all_tokens = this.getAllTokens())
            }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          authMastodon (authcode, type = 'default') {
            this.methods.authMastodon(authcode, type)
              .then(e => {
                this.input.authcode = null
                this.input.infobot_authcode = null
                this.token = e.access_token_crypt
                return this.methods.registerToken(this.token)
              }).then(e => {
                this.methods.setToken(this.token)
                this.account = e
                if (this.account.is_info_bot) {
                  Swal.fire({
                    title: 'お知らせボットのトークンを更新',
                    text: '今登録したトークンを、お知らせボットとして設定ファイルに登録しますか？',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: '更新',
                    cancelButtonText: 'キャンセル',
                  }).then((result) => {
                    if (!result.isConfirmed) return
                    this.methods.setInfoToken(this.token).then(e => {this.restartable = true})
                  }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
                }
                if (this.account.is_test_bot) {
                  Swal.fire({
                    title: 'テストボットのトークンを更新',
                    text: '今登録したトークンを、テストボットとして設定ファイルに登録しますか？',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: '更新',
                    cancelButtonText: 'キャンセル',
                  }).then((result) => {
                    if (!result.isConfirmed) return
                    this.methods.setTestToken(this.token).then(e => {this.restartable = true})
                  }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
                }
                return this.methods.getAccounts()
              }).then(e => {
                this.accounts = e
                this.all_tokens = this.getAllTokens()
              }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          authMisskey (authcode, type = 'default') {
            this.methods.authMisskey(authcode, type)
              .then(e => {
                this.input.authcode = null
                this.input.infobot_authcode = null
                this.token = e.access_token_crypt
                return this.methods.registerToken(this.token)
              }).then(e => {
                this.methods.setToken(this.token)
                this.account = e
                return this.methods.getAccounts()
              }).then(e => {
                this.accounts = e
                this.all_tokens = this.getAllTokens()
              }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          getAllTokens () {
            return this.accounts.map(v => v.token).join("\n")
          },
          isLoggedIn (account) {
            return account.token == this.token
          },
          restartPuma () {
            Swal.fire({
              title: 'Pumaの再起動',
              text: 'Pumaを再起動します。',
              icon: 'warning',
              showCancelButton: true,
              confirmButtonText: '再起動',
              cancelButtonText: 'キャンセル',
            }).then((result) => {
              if (!result.isConfirmed) return
              this.methods.restartPuma().then(e => {this.restartable = false})
            }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
        },
      })
      app.use(window.MulukhiyaLib)
      app.component('slide-up-down', window.SlideUpDown)
      app.directive('tooltip', window.VTooltip)
      app.mount('#app')
