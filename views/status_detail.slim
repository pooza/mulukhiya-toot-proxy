doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    nav.breadcrumbs
      ul
        li
          a href='/' = sns.node_name
        li
          a href='/mulukhiya' モロヘイヤHOME
        li
          a href='/mulukhiya/app/status' = controller.status_label
        li = params[:id]
    main#app class=env.type
      == slim.render 'fragment/message'
      article.status v-if='status.id'
        .visibility
          i :class="'fa fa-' + status.visibility_icon" v-tooltip.left='status.visibility_name'
        .header
          i class='fa fa-calendar'
          | {{status.created_at}}
        .header v-if='status.spoiler_text'
          i class='fa fa-circle-exclamation'
          | {{status.spoiler_text}}
        pre.body v-if='status.body' = '{{status.body}}'
        .footer-tags v-if='status.is_taggable'
          h4
            i class='fa fa-tag'
            | タグづけ
          .tag v-for='tag in status.footer_tags'
            | {{tag.name}}
            a href='javascript:void(0)' v-if='tag.is_deletable' @click='deleteTag(status.id, tag.name)'
              i class='fa fa-xmark'
          .tag
            | 新規タグを追加
            a href='javascript:void(0)' @click='createTag(status.id)'
              i class='fa fa-pencil'
    javascript:
      'use strict'
      Vue.use(VTooltip)
      Vue.use(MulukhiyaLib)
      Vue.use(window.VuejsDialog.main.default, {okText: '了解', cancelText: 'キャンセル'})
      new Vue({
        el: '#app',
        data: {
          account: {is_admin: false, username: null},
          status: {},
        },
        mounted () {
          Vue.getConfig()
            .then(e => {
              this.account = e.account
              return (new URL(location.href)).pathname.split('/').slice(-1)[0]
            }).then(id => Vue.getStatus(id))
            .then(e => {this.status = e})
            .catch(e => Vue.alert(this.$dialog, e))
        },
        methods: {
          createTag (id) {
            this.$dialog
              .prompt({title: '新規タグを作成'}, {promptHelp: 'タグの名前を入力して、作成ボタンを押下してください。', okText: '作成'})
              .then(e => Vue.createTag(id, e.data))
              .then(e => {this.status = e})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          deleteTag (id, tag) {
            Vue.deleteTag(id, tag)
              .then(e => {this.status = e})
              .catch(e => Vue.alert(this.$dialog, e))
          },
        },
      })
