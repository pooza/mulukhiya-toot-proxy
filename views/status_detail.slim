doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {entries: [{label: 'モロヘイヤHOME', href: '/mulukhiya'}, {label: controller.status_label, href: '/mulukhiya/app/status'}, {label: params[:id]}]}
    main#app class=env.type
      == slim.render 'fragment/message'
      article.status v-if='status.id'
        .visibility
          i :class="'fa fa-' + status.visibility_icon" v-tooltip.left='status.visibility_name'
        .header
          i class='fa fa-id-badge'
          | {{status.id}}
        .header
          i class='fa fa-calendar'
          | {{status.created_at}}
        .header v-if='status.spoiler_text'
          i class='fa fa-circle-exclamation'
          | {{status.spoiler_text}}
        .header
          i class='fas fa-user'
          | {{status.account.display_name}} {{status.account.acct}}
        pre.body v-if='status.body' {{status.body}}
        nav.footer-navigations v-if='status.is_taggable'
          h4
            i class='fa fa-tag'
            | タグづけ
          - if controller.repost?
            .alert タグづけを実行する前に、この#{controller.status_label}は一旦削除されます。
            .alert タグづけの実行後に、この#{controller.status_label}にアンケートがあれば削除されます。
          - else
            .alert この#{controller.status_label}にアンケートがあれば削除されます。
          .tag v-for='tag in status.footer_tags'
            | {{tag.name}}
            a href='javascript:void(0)' v-if='tag.is_deletable' @click='deleteTag(tag.name)'
              i class='fa fa-xmark'
          .tag
            | 新規タグを追加
            a href='javascript:void(0)' @click='createTag()'
              i class='fa fa-pencil'
          - if controller.repost?
            button.small @click='updateTags'
              i class='fa fa-cloud-arrow-up'
              | 更新
        nav.footer-navigations v-else=''
          .alert #{controller.visibility_name(:public)}ではない#{controller.status_label}はタグづけできません。
        nav.footer-navigations v-if='status.is_nowplaying || status.is_poipiku'
          h4
            i class='fa fa-bolt'
            | その他の操作
          ul
            li v-if='status.is_nowplaying'
              i class='fa fa-music'
              a :href="'/mulukhiya/app/status/' + (status.id || '(null)') + '/nowplaying'" ナウプレ
            - if controller.poipiku?
              li v-if='status.is_poipiku'
                i class='fa fa-image'
                a :href="'/mulukhiya/app/status/' + (status.id || '(null)') + '/poipiku'" ポイピク
    javascript:
      'use strict'
      const app = Vue.createApp({
        data () {
          return {
            account: {},
            status: {},
          }
        },
        async created () {
          this.methods.getConfig()
            .then(e => {
              this.account = this.methods.createAccountInfo(e)
              return (new URL(location.href)).pathname.split('/').slice(-1)[0]
            }).then(id => this.methods.getStatus(id))
            .then(e => {this.status = e})
        },
        methods: {
          createTag () {
            Swal.fire({
              title: 'タグの名前を入力して、作成ボタンを押下してください。',
              input: 'text',
              inputPlaceholder: 'タグの名前',
              showCancelButton: true,
              confirmButtonText: '作成',
              cancelButtonText: 'キャンセル',
            }).then((result) => {
              if (result.isConfirmed) {
                const tag = result.value.replace(/[ -/:-@[-`{-~]+/g, '_').replace(/(^_+|_+$)/g, '')
                if (this.status.footer_tags.map(v => v.name.replace(/^#/, '')).includes(tag)) return
                this.status.footer_tags.push({name: tag, is_deletable: true})
              }
            }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          deleteTag (tag) {
            this.status.footer_tags = this.status.footer_tags.filter(v => {
              return v.name.replace(/^#/, '') != tag
            })
          },
          updateTags () {
            this.methods.updateTags(this.status.id, this.status.footer_tags.map(v => v.name))
              .then(e => {
                this.status = e
                window.close()
              }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
        },
      })
      app.use(window.MulukhiyaLib)
      app.component('slide-up-down', window.SlideUpDown)
      app.directive('tooltip', window.VTooltip)
      app.mount('#app')
