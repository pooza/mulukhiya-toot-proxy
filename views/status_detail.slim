doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {entries: [{label: 'モロヘイヤHOME', href: '/mulukhiya'}, {label: controller.status_label, href: '/mulukhiya/app/status'}, {label: params[:id]}]}
    main#app class=env.type
      == slim.render 'fragment/message'
      article.status v-if='status.id'
        .visibility
          i :class="'fa fa-' + status.visibility_icon" v-tooltip.left='status.visibility_name'
        .header
          i class='fa fa-calendar'
          | {{status.created_at}}
        .header v-if='status.spoiler_text'
          i class='fa fa-circle-exclamation'
          | {{status.spoiler_text}}
        .header
          i class='fas fa-user'
          | {{status.account.display_name || '@' + status.account.username}}
        pre.body v-if='status.body' = '{{status.body}}'
        nav.footer-navigations v-if='status.is_taggable'
          h4
            i class='fa fa-tag'
            | タグづけ
          - if controller.delete_and_tagging?
            .alert タグづけを実行する前に、この投稿は一度削除されます。
          .tag v-for='tag in status.footer_tags'
            | {{tag.name}}
            a href='javascript:void(0)' v-if='tag.is_deletable' @click='deleteTag(tag.name)'
              i class='fa fa-xmark'
          .tag
            | 新規タグを追加
            a href='javascript:void(0)' @click='createTag()'
              i class='fa fa-pencil'
          - if controller.delete_and_tagging?
            button.small @click='updateTags'
              i class='fa fa-cloud-arrow-up'
              | 更新
        nav.footer-navigations v-else=''
          .alert #{controller.visibility_name(:public)}ではない#{controller.status_label}はタグ付けできません。
        nav.footer-navigations v-if='status.is_nowplaying || status.is_poipiku'
          h4
            i class='fa fa-bolt'
            | その他の操作
          ul
            li v-if='status.is_nowplaying'
              i class='fa fa-music'
              a :href="'/mulukhiya/app/status/' + (status.id || '(null)') + '/nowplaying'" ナウプレ
            - if controller.poipiku?
              li v-if='status.is_poipiku'
                i class='fa fa-image'
                a :href="'/mulukhiya/app/status/' + (status.id || '(null)') + '/poipiku'" ポイピク
      .hidden ref='delete_and_tagging' v-show='false' = controller.delete_and_tagging?
    javascript:
      'use strict'
      Vue.use(VTooltip)
      Vue.use(MulukhiyaLib)
      Vue.use(window.VuejsDialog.main.default, {okText: '了解', cancelText: 'キャンセル'})
      new Vue({
        el: '#app',
        data: {
          account: {is_admin: false, username: null},
          status: {},
        },
        mounted () {
          Vue.getConfig()
            .then(e => {
              this.account = e.account
              return (new URL(location.href)).pathname.split('/').slice(-1)[0]
            }).then(id => Vue.getStatus(id))
            .then(e => {this.status = e})
            .catch(e => Vue.alert(this.$dialog, e))
        },
        methods: {
          createTag () {
            if (this.isDeleteAndTaggingMode()) {
              this.$dialog
                .prompt({title: '新規タグを作成'}, {promptHelp: 'タグの名前を入力して、作成ボタンを押下してください。', okText: '作成'})
                .then(e => {
                  const tag = e.data.replace(/[ -/:-@[-`{-~]+/g, '_').replace(/(^_+|_+$)/g, '')
                  if (this.status.footer_tags.map(v => v.name.replace(/^#/, '')).includes(tag)) return
                  this.status.footer_tags.push({name: tag, is_deletable: true})
                }).catch(e => Vue.alert(this.$dialog, e))
            } else {
              this.$dialog
                .prompt({title: '新規タグを作成'}, {promptHelp: 'タグの名前を入力して、作成ボタンを押下してください。', okText: '作成'})
                .then(e => Vue.createTag(this.status.id, e.data))
                .then(e => {this.status = e})
                .catch(e => Vue.alert(this.$dialog, e))
            }
          },
          deleteTag (tag) {
            if (this.isDeleteAndTaggingMode()) {
              this.status.footer_tags = this.status.footer_tags.filter(v => {
                return v.name.replace(/^#/, '') != tag
              })
            } else {
              Vue.deleteTag(this.status.id, tag)
                .then(e => {this.status = e})
                .catch(e => Vue.alert(this.$dialog, e))
            }
          },
          updateTags () {
            if (this.isDeleteAndTaggingMode()) {
              Vue.updateTags(this.status.id, this.status.footer_tags.map(v => v.name))
                .then(e => {
                  this.status = e
                  window.close()
                }).catch(e => Vue.alert(this.$dialog, e))
            }
          },
          isDeleteAndTaggingMode () {return this.$refs.delete_and_tagging.innerText.trim() == 'true'},
        },
      })
