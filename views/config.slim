doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {current: '環境設定'}
    main#app class=env.type
      == slim.render 'fragment/message'
      h2 環境設定
      section v-if='account.username'
        h3 現在の設定
        .result-container
          pre = '{{result}}'
      section.config v-if='account.username'
        h3 @click='toggleVisibility("tags")' 固定タグ
        vue-slide-up-down :active='layout.details.tags'
          .field-container
            textarea placeholder='タグ化する文字列を改行区切りで' v-model.trim='form.tags'
          .inline-field-container
            input.short placeholder='期限(分)' v-model.number='form.program.minutes'
          - if controller.livecure?
            .field-container
              v-select :options='options.program' @input='onChangeTags' v-model='form.program.tags'
          .field-update-button-container
            button @click='updateTags' 更新
      section.config v-if='account.username && layout.sections.livecure'
        h3 @click='toggleVisibility("livecure")' = "実況#{controller.status_label}"
        vue-slide-up-down :active='layout.details.livecure'
          .inline-field-container
            label
              input type='checkbox' v-model='form.livecure' = "実況#{controller.status_label}を隠す"
          .field-update-button-container
            button @click='updateLivecure' 更新
      section.config v-if='account.username && layout.sections.growi'
        h3 @click='toggleVisibility("growi")' GROWI
        vue-slide-up-down :active='layout.details.growi'
          ol
            li
              | GROWIのアカウントをお持ちでなければ、
              a href='https://growi.cloud/' target='_blank' rel='noreferrer' GROWI.cloud
              | で新しいGROWIサーバを登録してください。
              br
              | フリープランもあります。サーバを登録する手順の中で、新しいユーザーが作成できます。
            li
              | GROWIサーバのURLと、APIトークンを下の欄に入力してください。
              br
              | APIトークンは、ユーザー設定画面（画面右上のユーザーアイコンをクリック）から作成できます。
            li
              | 必要ならば
              code = "/user/{{account.username}}/draft"
              | 等、記事作成先を入力してください。
              br
              | 空欄の場合は
              code = "/mulukhiya/user/{{account.username}}"
              | に記事が作成されます。
            li 更新ボタンを押下。
          .inline-field-container
            h4 トークン
            input placeholder='GROWIのAPIトークン（保存時に暗号化されます）' v-model.trim='form.growi.token'
          .inline-field-container
            h4 URL
            input placeholder='GROWIのルートURL' v-model.trim='form.growi.url'
          .inline-field-container
            h4 記事作成先
            input placeholder='記事作成先のパス' v-model.trim='form.growi.prefix'
          .field-update-button-container
            button @click='updateGrowi' 更新
      section.config v-if='account.username && layout.sections.dropbox'
        h3 @click='toggleVisibility("dropbox")' Dropbox
        vue-slide-up-down :active='layout.details.dropbox'
          ol
            li
              | Dropboxの開発者向けページで、
              a href='https://www.dropbox.com/developers/apps' target='_blank' rel='noreferrer' アプリケーション登録
              | を行ってください。
            li アクセストークンを取得して、下の欄に入力してください。
            li 更新ボタンを押下。
          .inline-field-container
            h4 トークン
            input placeholder='Dropboxのアクセストークン（保存時に暗号化されます）' v-model.trim='form.dropbox.token'
          .field-update-button-container
            button @click='updateDropbox' 更新
      section.config v-if='account.username && layout.sections.lemmy'
        h3 @click='toggleVisibility("lemmy")' Lemmy
        vue-slide-up-down :active='layout.details.lemmy'
          .inline-field-container
            h4 ホスト名
            input placeholder='Lemmyのホスト名（lemmy.example.com等）' v-model.trim='form.lemmy.host'
          .inline-field-container
            h4 ユーザーID
            input placeholder='LemmyのユーザーID（またはメールアドレス）' v-model.trim='form.lemmy.user'
          .inline-field-container
            h4 パスワード
            input type='password' placeholder='Lemmyのパスワード（保存時に暗号化されます）' v-model.trim='form.lemmy.password'
          .inline-field-container
            h4 コミュニティID
            input placeholder='LemmyのコミュニティID' v-model.trim='form.lemmy.community'
          .field-update-button-container
            button @click='updateLemmy' 更新
      section.config v-if='account.username && layout.sections.annict'
        h3 @click='toggleVisibility("annict")' Annict
        vue-slide-up-down :active='layout.details.annict'
          ol
            li
              | アカウントを持っていない場合は、
              a href='https://annict.com/sign_up' target='_blank' rel='noreferrer' ユーザー登録
              | を行ってください。
            li
              a href=annict.oauth_uri target='_blank' rel='noreferrer' 認証コードを取得
              | して、下の欄に入力してください。
            li 認証ボタンを押下。
          .inline-field-container
            h4 認証コード
            input placeholder='Annictの認証コード' v-model.trim='form.annict.auth_code'
          .field-update-button-container
            button :disabled='!form.annict.auth_code' @click='authAnnict' 認証
            button.alert @click='unauthAnnict' 認証を解除
      section.config v-if='account.username'
        h3 @click='toggleVisibility("webhook")' Slack互換webhook
        vue-slide-up-down :active='layout.details.webhook'
          .inline-field-container
            h4 公開範囲
            v-select :options='options.visibility' v-model='form.webhook.visibility'
          .field-update-button-container
            button @click='updateWebhook' 更新
      section.config v-if='account.username'
        h3 @click='toggleVisibility("notify")' 通知
        vue-slide-up-down :active='layout.details.notify'
          .inline-field-container
            label
              input type='checkbox' v-model='form.notify.user_config' 設定変更を通知
            label.alert
              input type='checkbox' v-model='form.notify.verbose' 冗長な通知（管理者・開発者向け）
          .field-update-button-container
            button @click='updateNotify' 更新
    == slim.render 'fragment/footer'
    javascript:
      'use strict'
      Vue.use(VTooltip)
      Vue.use(MulukhiyaLib)
      Vue.use(window.VuejsDialog.main.default, {okText: '了解', cancelText: 'キャンセル'})
      Vue.component('vue-slide-up-down', VueSlideUpDown)
      Vue.component('v-select', VueSelect.VueSelect)
      new Vue({
        el: '#app',
        data: {
          account: {is_admin: false, username: null},
          result: null,
          programs: [],
          form: {
            notify: {user_config: null, verbose: null},
            livecure: false,
            annict: {auth_code: null},
            program: {minutes: null, tags: null},
            tags: '',
            webhook: {token: null, visibility: null},
            growi: {token: null, url: null, prefix: null},
            dropbox: {token: null},
            lemmy: {host: null, user: null, passwrd: null, community: null},
          },
          options: {
            program: [],
            visibility: [],
          },
          layout: {
            sections: {
              livecure: #{controller.livecure?},
              growi: #{controller.growi?},
              lemmy: #{controller.lemmy?},
              dropbox: #{controller.dropbox?},
              annict: #{controller.annict?},
            },
            details: {
              growi: false,
              dropbox: false,
              lemmy: false,
              tags: false,
              livecure: false,
              webhook: false,
              notify: false,
              annict: false,
            },
          },
        },
        mounted: function () {
          Vue.getConfig()
            .then(e => {
              this.updateForm(e)
              this.account = e.account
            }).catch(e => Vue.alert(this.$dialog, e))
          Vue.getPrograms()
            .then(e => {
              this.programs = e
              this.options.program = Object.values(e)
                .filter(program => program.enable)
                .map(program => ({
                  code: program.key,
                  label: program.minutes ? `${Vue.createProgramTags(program).join(', ')} (${program.minutes}分)` : Vue.createProgramTags(program).join(', '),
                }))
              this.options.program.unshift({label: '(固定タグのクリア)'})
            })
        },
        methods: {
          updateForm: function (data) {
            this.result = jsyaml.dump(data.config)
            this.form.webhook.visibility = Vue.dig(data, 'config', 'webhook', 'visibility') || 'public'
            this.form.growi.url = Vue.dig(data, 'config', 'growi', 'url')
            this.form.growi.prefix = Vue.dig(data, 'config', 'growi', 'prefix')
            this.form.lemmy.host = Vue.dig(data, 'config', 'lemmy', 'host')
            this.form.lemmy.user = Vue.dig(data, 'config', 'lemmy', 'user')
            this.form.lemmy.community = Vue.dig(data, 'config', 'lemmy', 'community')
            this.form.notify.user_config = Vue.dig(data, 'config', 'notify', 'user_config') == true
            this.form.notify.verbose = Vue.dig(data, 'config', 'notify', 'verbose') == true
            if (Vue.dig(data, 'config', 'tagging', 'user_tags')) {
              this.form.tags = Vue.dig(data, 'config', 'tagging', 'user_tags').join("\n")
            }
            if (data.filters) {
              if (Array.isArray(data.filters)) {
                data.filters.filter(f => {f.phrase == '#実況'}).map(f => {this.form.livecure = true})
              }
            }
            if (data.visibility_names) {
              this.options.visibility = []
              Object.keys(data.visibility_names).map(k => {
                const v = data.visibility_names[k]
                this.options.visibility.push({label: k == v ? k : `${v} (${k})`, code: v})
              })
            }
          },
          updateConfig: function (command) {
            Vue.updateConfig(command)
              .then(e => this.updateForm(e))
              .catch(e => Vue.alert(this.$dialog, e))
          },
          onChangeTags: function (e) {
            if (e.code) {
              this.form.tags = Vue.createProgramTags(this.programs[e.code]).join("\n")
              this.form.program.minutes = this.programs[e.code].minutes
            } else {
              this.form.tags = null
              this.form.program.minutes = null
            }
          },
          toggleVisibility: function (name) {
            this.layout.details[name] = !this.layout.details[name]
          },
          updateGrowi: function () {
            const command = {growi: {url: null, token: null, prefix: null}}
            if (this.form.growi.token) {command.growi.token = this.form.growi.token}
            if (this.form.growi.url) {command.growi.url = this.form.growi.url}
            if (this.form.growi.prefix) {command.growi.prefix = this.form.growi.prefix}
            this.updateConfig(command)
            this.form.growi.token = null
          },
          updateDropbox: function () {
            const command = {dropbox: {token: null}}
            if (this.form.dropbox.token) {command.dropbox.token = this.form.dropbox.token}
            this.updateConfig(command)
            this.form.dropbox.token = null
          },
          updateLemmy: function () {
            const command = {lemmy: {host: null, user: null, community: null}}
            if (this.form.lemmy.host) {command.lemmy.host = this.form.lemmy.host}
            if (this.form.lemmy.user) {command.lemmy.user = this.form.lemmy.user}
            if (this.form.lemmy.password) {command.lemmy.password = this.form.lemmy.password}
            if (this.form.lemmy.community) {command.lemmy.community = Number(this.form.lemmy.community)}
            this.updateConfig(command)
            this.form.lemmy.password = null
          },
          updateTags: function () {
            const command = {tagging: {user_tags: null, minutes: null}}
            if (this.form.tags) {
              command.tagging.user_tags = this.form.tags.split("\n")
              if (this.form.program.minutes) {
                command.tagging.minutes = this.form.program.minutes
              }
            } else {
              command.tagging.minutes = null
            }
            this.updateConfig(command)
          },
          updateLivecure: function () {
            Vue.updateLivecureFlag(this.form.livecure)
              .then(e => {this.layout.details.livecure = false})
              .catch(e => Vue.alert(this.$dialog, e))
          },
          updateWebhook: function () {
            const command = {webhook: {visibility: null}}
            if (this.form.webhook.visibility.code != 'public') {
              command.webhook.visibility = this.form.webhook.visibility.code
            }
            this.updateConfig(command)
          },
          updateNotify: function () {
            const command = {notify: {verbose: null, user_config: null}}
            if (this.form.notify.verbose) {command.notify.verbose = true}
            if (this.form.notify.user_config) {command.notify.user_config = true}
            this.updateConfig(command)
          },
          authAnnict: function () {
            Vue.authAnnict(this.form.annict.auth_code)
              .then(e => {
                this.result = jsyaml.dump(e.config)
                this.form.annict.auth_code = null
                this.layout.details.annict = false
              }).catch(e => Vue.alert(this.$dialog, e))
          },
          unauthAnnict: function () {
            this.$dialog.confirm({body: 'Annictのトークンを削除します。'},{okText: '削除'})
              .then(e => this.updateConfig({annict: null}))
              .then(e => {
                this.result = jsyaml.dump(e.config)
                this.layout.details.annict = false
              }).catch(e => Vue.alert(this.$dialog, e))
          },
        },
      })
