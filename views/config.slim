doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {entries: [{label: 'モロヘイヤHOME', href: '/mulukhiya'}, {label: '環境設定'}]}
    main#app class=env.type
      == slim.render 'fragment/message'
      h2 環境設定
      section v-if='account.username'
        h3 現在の設定
        .result-container
          pre v-if='result' {{result}}
      section.config v-if='account.username'
        h3 @click='toggleVisibility("tags")' 固定タグ
        slide-up-down :active='layout.details.tags'
          .field-container
            textarea placeholder='タグ化する文字列を改行区切りで' v-model.trim='form.tags'
          .inline-field-container
            input.short type='number' placeholder='期限(分)' v-model.number='form.program.minutes'
          - if controller.livecure?
            .field-container
              multiselect :options='options.program' label='label' track-by='value' @input='onChangeTags' v-model='form.program.tags'
          .field-update-button-container
            button @click='updateTags' 更新
      - if controller.filter? && controller.livecure?
        section.config v-if='account.username && layout.sections.livecure'
          h3 @click='toggleVisibility("livecure")' = "実況#{controller.status_label}"
          slide-up-down :active='layout.details.livecure'
            .inline-field-container
              label
                input type='checkbox' v-model='form.livecure' = "実況#{controller.status_label}を隠す"
            .field-update-button-container
              button @click='updateLivecure' 更新
      section.config v-if='account.username && layout.sections.lemmy'
        h3 @click='toggleVisibility("lemmy")' Lemmy
        slide-up-down :active='layout.details.lemmy'
          ol
            li Lemmyサービスの認証情報（URL、ユーザーID、パスワード）を入力してください。
            li 認証ボタンを押下。
            li ブックマークを投稿するコミュニティを選択してください。
            li 更新ボタンを押下。
          .inline-field-container
            h4 URL
            input placeholder='LemmyサービスのURL（https://#{config['/lemmy/hosts/default']} など）' v-model.trim='form.lemmy.url'
          .inline-field-container
            h4 ユーザーID
            input placeholder='LemmyサービスのユーザーID（またはメールアドレス）' v-model.trim='form.lemmy.user'
          .inline-field-container
            h4 パスワード
            input type='password' placeholder='Lemmyサービスのパスワード（保存時に暗号化されます）' v-model.trim='form.lemmy.password'
          .field-container
            h4 コミュニティ
            .alert v-if='!form.lemmy.community' コミュニティが未設定です。
            .post-auth
              multiselect :options='options.lemmy_communities' label='label' track-by='value' v-model='form.lemmy.community'
              .field-update-button-container
                button @click='updateLemmy' 更新
                button.alert @click='unauthLemmy' 認証を解除
      section.config v-if='account.username && layout.sections.annict'
        h3 @click='toggleVisibility("annict")' Annict
        slide-up-down :active='layout.details.annict'
          ol
            li
              | アカウントを持っていない場合は、
              a href='https://annict.com/sign_up' target='_blank' rel='noreferrer' ユーザー登録
              | を行ってください。
            li
              a href=annict.oauth_uri target='_blank' rel='noreferrer' 認証コードを取得
              | して、下の欄に入力してください。
            li 認証ボタンを押下。
          .inline-field-container
            h4 認証コード
            input type='password' placeholder='Annictの認証コード' v-model.trim='form.annict.auth_code'
          .field-update-button-container
            button :disabled='!form.annict.auth_code' @click='authAnnict' 認証
            button.alert @click='unauthAnnict' 認証を解除
          - if Mulukhiya::AnnictService.keywords.present?
            .inline-field-container
              label
                input type='checkbox' v-model='form.annict.theme_works_only'
                | タイトルに
                - Mulukhiya::AnnictService.keywords.each do |w|
                  | 「
                  strong #{w}
                  | 」
                | が含まれる作品のみをレビュー対象とする
            .field-update-button-container
              button @click='updateAnnict' 更新
      section.config v-if='account.username'
        h3 @click='toggleVisibility("webhook")' Slack互換webhook
        slide-up-down :active='layout.details.webhook'
          .field-container
            h4 公開範囲
            multiselect :options="options.visibility" label="label" track-by="value" v-model="form.webhook.visibility"
          .field-update-button-container
            button @click='updateWebhook' 更新
      - if sns
        section.config v-if='account.username'
          h3 @click='toggleVisibility("notify")' 通知
          slide-up-down :active='layout.details.notify'
            .inline-field-container
              label.alert
                input type='checkbox' v-model='form.notify.verbose' 冗長な通知（管理者・開発者向け）
            .field-update-button-container
              button @click='updateNotify' 更新
    == slim.render 'fragment/footer'
    javascript:
      'use strict'
      const app = Vue.createApp({
        data () {
          return {
            account: {is_admin: false, username: null},
            config: null,
            result: null,
            programs: [],
            lemmy: {
              communities: {},
            },
            form: {
              notify: {verbose: null},
              livecure: false,
              annict: {auth_code: null, theme_works_only: false},
              program: {minutes: null, tags: null},
              tags: '',
              webhook: {token: null, visibility: null},
              lemmy: {url: null, user: null, passwrd: null, community: null},
            },
            options: {
              program: [],
              visibility: [],
              lemmy_communities: [],
            },
            layout: {
              sections: {
                livecure: #{controller.livecure?},
                lemmy: #{controller.lemmy?},
                annict: #{controller.annict?},
              },
              details: {
                lemmy: false,
                tags: false,
                livecure: false,
                webhook: false,
                notify: false,
                annict: false,
              },
            },
          }
        },
        async created () {
          this.methods.getConfig()
            .then(e => {
              this.updateForm(e)
              this.account = this.methods.createAccountInfo(e)
              this.config = e.config
              return this.methods.getLemmyCommunities()
            }).then(e => {
              this.lemmy.communities = e
              Object.keys(this.lemmy.communities)
                .map(k => {
                  this.options.lemmy_communities.splice(0)
                  this.options.lemmy_communities.push({value: k, label: this.lemmy.communities[k]})
                })
              this.form.lemmy.community = this.lemmy.communities[this.methods.dig(this.config, 'lemmy', 'community')]
            })
          this.methods.getPrograms()
            .then(e => {
              this.programs = e
              this.options.program = Object.values(e)
                .filter(program => program.enable)
                .map(program => ({
                  value: program.key,
                  label: program.minutes ? `${this.methods.createProgramTags(program).join(', ')} (${program.minutes}分)` : this.methods.createProgramTags(program).join(', '),
                }))
              this.options.program.unshift({label: '(固定タグのクリア)'})
            })
        },
        methods: {
          updateForm (data) {
            this.result = jsyaml.dump(data.config)
            this.form.webhook.visibility = this.methods.dig(data, 'config', 'webhook', 'visibility') || 'public'
            this.form.lemmy.url = this.methods.dig(data, 'config', 'lemmy', 'url')
            this.form.lemmy.user = this.methods.dig(data, 'config', 'lemmy', 'user')
            this.form.lemmy.community = this.lemmy.communities[this.methods.dig(data, 'config', 'lemmy', 'community')]
            this.form.annict.theme_works_only = this.methods.dig(data, 'config', 'annict', 'theme_works_only') == true
            this.form.notify.verbose = this.methods.dig(data, 'config', 'notify', 'verbose') == true
            if (this.methods.dig(data, 'config', 'tagging', 'user_tags')) {
              this.form.tags = this.methods.dig(data, 'config', 'tagging', 'user_tags').join("\n")
            }
            if (data.filters) {
              if (Array.isArray(data.filters)) {
                data.filters.filter(f => {f.phrase == '#実況'}).map(f => {this.form.livecure = true})
              }
            }
            if (data.visibility_names) {
              this.options.visibility.splice(0)
              Object.keys(data.visibility_names).map(k => {
                const v = data.visibility_names[k]
                if (!this.options.visibility.find(o => o.value == v)) {
                  this.options.visibility.push({label: k == v ? k : `${v} (${k})`, value: v})
                }
              })
            }
          },
          updateConfig (command) {
            return this.methods.updateConfig(command)
              .then(e => {
                this.updateForm(e)
                return e
              }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          onChangeTags (e) {
            if (e.code) {
              this.form.tags = this.methods.createProgramTags(this.programs[e.code]).join("\n")
              this.form.program.minutes = this.programs[e.code].minutes
            } else {
              this.form.tags = null
              this.form.program.minutes = null
            }
          },
          toggleVisibility (name) {
            this.layout.details[name] = !this.layout.details[name]
          },
          updateLemmy () {
            const command = {lemmy: {url: null, user: null, community: null, host: null}}
            if (this.form.lemmy.url) {command.lemmy.url = this.form.lemmy.url}
            if (this.form.lemmy.user) {command.lemmy.user = this.form.lemmy.user}
            if (this.form.lemmy.password) {command.lemmy.password = this.form.lemmy.password}
            if (this.form.lemmy.community) {command.lemmy.community = Number(this.form.lemmy.community)}
            this.updateConfig(command)
            this.form.lemmy.password = null
            this.methods.getLemmyCommunities()
              .then(e => {
                this.lemmy.communities = e
                this.options.lemmy_communities.splice(0)
                Object.keys(this.lemmy.communities)
                  .map(k => {
                    this.options.lemmy_communities.push({value: k, label: this.lemmy.communities[k]})
                  })
              })
          },
          unauthLemmy () {
            Swal.fire({
              title: 'Lemmy認証の解除',
              text: 'Lemmyの認証を解除します。',
              icon: 'warning',
              showCancelButton: true,
              confirmButtonText: '解除',
              cancelButtonText: 'キャンセル',
            }).then((result) => {
              if (!result.isConfirmed) return
              this.updateConfig({lemmy: null})
                .then(e => {
                  this.result = jsyaml.dump(e.config)
                  this.layout.details.lemmy = false
                  Object.keys(this.lemmy.communities).forEach(k => delete this.lemmy.communities[k])
                  this.options.lemmy_communities = null
                })
            }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          updateTags () {
            const command = {tagging: {user_tags: null, minutes: null}}
            if (this.form.tags) {
              command.tagging.user_tags = this.form.tags.split("\n")
              if (this.form.program.minutes) {
                command.tagging.minutes = this.form.program.minutes
              }
            } else {
              command.tagging.minutes = null
            }
            this.updateConfig(command)
          },
          updateLivecure () {
            this.methods.updateLivecureFlag(this.form.livecure)
              .then(e => {this.layout.details.livecure = false})
              .catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          updateWebhook () {
            const command = {webhook: {visibility: null}}
            if (this.form.webhook.visibility != 'public') {
              command.webhook.visibility = this.form.webhook.visibility
            }
            this.updateConfig(command)
          },
          updateNotify () {
            const command = {notify: {verbose: null}}
            if (this.form.notify.verbose) {command.notify.verbose = true}
            this.updateConfig(command)
          },
          authAnnict () {
            this.methods.authAnnict(this.form.annict.auth_code)
              .then(e => {
                this.result = jsyaml.dump(e.config)
                this.form.annict.auth_code = null
                this.layout.details.annict = false
              }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          updateAnnict () {
            const command = {annict: {theme_works_only: null}}
            if (this.form.annict.theme_works_only) {command.annict.theme_works_only = true}
            this.updateConfig(command)
          },
          unauthAnnict () {
            Swal.fire({
              title: 'Annict認証の解除',
              text: 'Annictの認証を解除します。',
              icon: 'warning',
              showCancelButton: true,
              confirmButtonText: '解除',
              cancelButtonText: 'キャンセル',
            }).then((result) => {
              if (!result.isConfirmed) return
              this.updateConfig({annict: null})
                .then(e => {
                  this.result = jsyaml.dump(e.config)
                  this.layout.details.annict = false
                })
            }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
        },
      })
      app.use(window.MulukhiyaLib)
      app.component('slide-up-down', window.SlideUpDown)
      app.directive('tooltip', window.VTooltip)
      app.component('multiselect', window.VueformMultiselect)
      app.mount('#app')
