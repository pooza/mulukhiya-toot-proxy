doctype html
html lang='ja'
  head
    == slim.render 'fragment/metadata'
    == slim.render 'fragment/assets'
  body
    == slim.render 'fragment/header'
    == slim.render 'fragment/breadcrumbs', {entries: [{label: 'モロヘイヤHOME', href: '/mulukhiya'}, {label: controller.status_label}]}
    main#app class=env.type
      == slim.render 'fragment/message'
      h2 = controller.status_label
      - if controller.account_timeline?
        nav.search-form-container v-if='account.username'
          .control
            i class='fa fa-magnifying-glass'
            input type='search' placeholder='検索フレーズ' autocomplete="on" list="suggested_keywords" v-model.trim='keyword' @keydown.enter='searchStatuses'
            datalist id='suggested_keywords'
              option v-for='keyword in suggested_keywords' {{keyword}}
            button.small @click='searchStatuses' 検索
        template v-if='account.username'
          article.status v-for='(status, id) in statuses'
            .visibility
              i :class="'fa fa-' + status.visibility_icon" v-tooltip.left='status.visibility_name'
            .header
              i class='fa fa-id-badge'
              a :href='status.webui_url' = '{{status.id}}'
            .header
              i class='fa fa-calendar'
              | {{status.created_at}}
            .header v-if='status.spoiler_text'
              i class='fa fa-circle-exclamation'
              | {{status.spoiler_text}}
            .header
              i class='fas fa-user'
              | {{status.account.display_name}} {{status.account.acct}}
            pre.body v-if='status.body' = '{{status.body}}'
            nav.footer-navigations v-if='status.is_taggable && account.username==status.account.username'
              h4
                i class='fa fa-tag'
                | タグづけ
              - if controller.repost?
                ul
                  li
                    i class='fa-solid fa-delete-left'
                    a :href="'/mulukhiya/app/status/' + status.id" 削除してタグづけ
            nav.footer-navigations v-if='(status.is_nowplaying || status.is_poipiku) && (account.username==status.account.username)'
              h4
                i class='fa fa-bolt'
                | その他の操作
              ul
                li v-if='status.is_nowplaying'
                  i class='fa fa-music'
                  a :href="'/mulukhiya/app/status/' + (status.id || '(null)') + '/nowplaying'" ナウプレ
                - if controller.poipiku?
                  li v-if='status.is_poipiku'
                    i class='fa fa-image'
                    a :href="'/mulukhiya/app/status/' + (status.id || '(null)') + '/poipiku'" ポイピク
        nav.appender-container v-if='!last_page && account.username'
          a @click='appendStatuses' 続きを読む…
      - else
        article.status #{controller.display_name}は一覧表示に対応していません。
    javascript:
      'use strict'
      const app = Vue.createApp({
        data () {
          return {
            account: {is_admin: false, username: null},
            statuses: {},
            suggested_keywords: this.methods.getSuggestedKeywords(),
            self: true,
            page: 0,
            keyword: null,
            last_page: false,
          }
        },
        mounted () {
          this.methods.getConfig()
            .then(e => {
              this.account = this.methods.createAccountInfo(e)
              if (this.account.username) {this.appendStatuses()}
            }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
        },
        methods: {
          createTag (id) {
            this.$dialog
              .prompt({title: '新規タグを作成'}, {promptHelp: 'タグの名前を入力して、作成ボタンを押下してください。', okText: '作成'})
              .then(e => this.methods.createTag(id, e.data))
              .then(e => this.statuses[e.id] = e)
              .catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          deleteTag (id, tag) {
            this.methods.deleteTag(id, tag)
              .then(e => this.statuses[e.id] = e)
              .catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
          searchStatuses () {
            this.page = 0
            Object.keys(this.statuses).forEach(k => delete this.statuses[k])
            this.last_page = false
            setTimeout(this.appendStatuses, 500)
          },
          appendStatuses () {
            this.page ++
            this.methods.getStatuses({page: this.page, q: this.keyword, self: this.self})
              .then(e => {
                this.suggested_keywords = this.methods.getSuggestedKeywords()
                if (0 < e.length) {
                  e.map(v => this.statuses[v.id] = v)
                } else {
                  this.last_page = true
                  Swal.fire({
                    title: `#{controller.status_label}はこれ以上ありません。`,
                    toast: true,
                    position: 'top-end',
                    icon: 'info',
                    showConfirmButton: false,
                    timer: 2000,
                  })
                }
              }).catch(e => Swal.fire({text: e.message, icon: 'error'}))
          },
        },
      })
      app.use(window.MulukhiyaLib)
      app.component('slide-up-down', window.SlideUpDown)
      app.directive('tooltip', window.VTooltip);
      app.mount('#app')
